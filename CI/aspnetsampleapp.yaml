trigger:
  - trunk

variables:
  containerregistry: 'ContainerRegistryElvia'
  imagetag: $(Build.BuildNumber)
  name: demo-app
  namespace: core
  group: aqua_saas

container:
  image: aquasec/aqua-scanner
  env:
    AQUA_KEY: $(AQUA_KEY)
    AQUA_SECRET: $(AQUA_SECRET)
    AQUA_URL: https://api.eu-1.supply-chain.cloud.aquasec.com
    CSPM_URL: https://eu-1.api.cloudsploit.com
    TRIVY_RUN_AS_PLUGIN: aqua
    # For http/https proxy configuration add env vars: HTTP_PROXY/HTTPS_PROXY, CA-CRET (path to CA certificate)

stages:
- stage: Build        
  jobs:
    - job: Build
      steps:
        - task: Docker@2
          displayName: "Login for $(containerregistry)"
          inputs:
            containerRegistry: $(containerregistry)
            command: login

        - task: Docker@2
          displayName: Pull docker image
          inputs:
            containerRegistry: $(containerregistry)
            command: pull
            arguments: containerregistryelvia.azurecr.io/dotnet/samples:aspnetapp

        - task: aquasecScanner@4
          displayName: "Scan docker image with Aquasec"
          inputs:
            image: "containerregistryelvia.azurecr.io/dotnet/samples:aspnetapp"
            scanner: "containerregistryelvia.azurecr.io/aquasec/scanner:latest"
            connection: "aqua-scanner"
            policies: Default
          continueOnError: false

        - script: |
            trivy fs --scanners config,vuln,secret .
            # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
            # To enable SAST scanning, add: --sast
            # To enable reachability scanning, add: --reachability
            # To enable npm/dotnet non-lock file scanning, add: --package-json / --dotnet-proj
          displayName: Aqua scanner Saas
      
